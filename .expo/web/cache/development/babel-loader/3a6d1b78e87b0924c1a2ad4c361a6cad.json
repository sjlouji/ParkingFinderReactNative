{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/joan/Documents/Drive/Projects/Doctsapp/Docs/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport HeaderJS from \"./Components/Header/Header\";\nimport { AppLoading } from 'expo';\nimport { Container } from 'native-base';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport HomeScreen from \"./Pages/Home/HomeScreen\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nvar Tab = createMaterialBottomTabNavigator();\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({\n                Roboto: require('native-base/Fonts/Roboto.ttf'),\n                Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf')\n              }, Ionicons.font)));\n\n            case 2:\n              this.setState({\n                isReady: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }\n      }, React.createElement(HeaderJS, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }\n      }), React.createElement(NavigationContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }\n      }, React.createElement(Tab.Navigator, {\n        initialRouteName: \"Home\",\n        activeColor: \"#3e2465\",\n        inactiveColor: \"#694fad\",\n        barStyle: {\n          backgroundColor: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }\n      }, React.createElement(Tab.Screen, {\n        name: \"Home\",\n        component: HomeScreen,\n        options: {\n          tabBarLabel: 'Home',\n          tabBarIcon: function tabBarIcon(_ref) {\n            var color = _ref.color;\n            return React.createElement(MaterialCommunityIcons, {\n              name: \"home\",\n              color: color,\n              size: 20,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 13\n              }\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 7\n        }\n      }), React.createElement(Tab.Screen, {\n        name: \"Trending\",\n        component: SettingsScreen,\n        options: {\n          tabBarLabel: 'Updates',\n          tabBarIcon: function tabBarIcon(_ref2) {\n            var color = _ref2.color;\n            return React.createElement(MaterialCommunityIcons, {\n              name: \"trending\",\n              color: color,\n              size: 26,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 13\n              }\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 7\n        }\n      }), React.createElement(Tab.Screen, {\n        name: \"Profile\",\n        component: SettingsScreen,\n        options: {\n          tabBarLabel: 'Profile',\n          tabBarIcon: function tabBarIcon(_ref3) {\n            var color = _ref3.color;\n            return React.createElement(MaterialCommunityIcons, {\n              name: \"account\",\n              color: color,\n              size: 26,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 13\n              }\n            });\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }\n      }))));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };\n\nfunction SettingsScreen() {\n  return React.createElement(View, {\n    style: {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, \"Settings!\"));\n}","map":{"version":3,"sources":["/Users/joan/Documents/Drive/Projects/Doctsapp/Docs/App.js"],"names":["StatusBar","React","HeaderJS","AppLoading","Container","Font","Ionicons","NavigationContainer","createMaterialBottomTabNavigator","HomeScreen","MaterialCommunityIcons","Tab","App","loadAsync","Roboto","require","Roboto_medium","font","setState","isReady","backgroundColor","tabBarLabel","tabBarIcon","color","SettingsScreen","Component"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport HeaderJS from './Components/Header/Header';\nimport { AppLoading } from 'expo';\nimport { Container } from 'native-base';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport HomeScreen from './Pages/Home/HomeScreen';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\n\nconst Tab = createMaterialBottomTabNavigator();\n\nexport default class App extends React.Component{\n\n  async componentDidMount() {\n    await Font.loadAsync({\n      Roboto: require('native-base/Fonts/Roboto.ttf'),\n      Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf'),\n      ...Ionicons.font,\n    });\n    this.setState({ isReady: true });\n  }\n\n\n  render() {\n    return (\n      <Container>\n        <HeaderJS />\n        <NavigationContainer>\n          <Tab.Navigator\n            initialRouteName=\"Home\"\n            activeColor=\"#3e2465\"\n            inactiveColor=\"#694fad\"\n            barStyle={{ backgroundColor: 'white' }}\n          >\n      <Tab.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          tabBarLabel: 'Home',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name=\"home\" color={color} size={20} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Trending\"\n        component={SettingsScreen}\n        options={{\n          tabBarLabel: 'Updates',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name=\"trending\" color={color} size={26} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Profile\"\n        component={SettingsScreen}\n        options={{\n          tabBarLabel: 'Profile',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name=\"account\" color={color} size={26} />\n          ),\n        }}\n      />\n    </Tab.Navigator>\n        </NavigationContainer>\n      </Container>\n    );\n  }\n\n}\n\n\n\nfunction SettingsScreen() {\n  return (\n    <View style={{  }}>\n      <Text>Settings!</Text>\n    </View>\n  );\n}"]},"metadata":{},"sourceType":"module"}